/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.training.kafka.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Schema for user events with schema evolution support */
@org.apache.avro.specific.AvroGenerated
public class UserEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1946371450874974637L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UserEvent\",\"namespace\":\"com.training.kafka.avro\",\"doc\":\"Schema for user events with schema evolution support\",\"fields\":[{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique identifier for the user\"},{\"name\":\"action\",\"type\":{\"type\":\"enum\",\"name\":\"ActionType\",\"symbols\":[\"LOGIN\",\"LOGOUT\",\"PURCHASE\",\"PAGE_VIEW\",\"SEARCH\",\"CART_ADD\",\"CART_REMOVE\"]},\"doc\":\"The action performed by the user\"},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"Timestamp when the event occurred (epoch millis)\"},{\"name\":\"sessionId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Session identifier for the user\"},{\"name\":\"properties\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},\"doc\":\"Additional properties for the event\",\"default\":{}},{\"name\":\"deviceInfo\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"DeviceInfo\",\"fields\":[{\"name\":\"deviceType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"userAgent\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"ipAddress\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"location\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}],\"doc\":\"Device information (optional)\",\"default\":null},{\"name\":\"version\",\"type\":\"int\",\"doc\":\"Schema version for evolution tracking\",\"default\":1}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<UserEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<UserEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<UserEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<UserEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<UserEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this UserEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a UserEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a UserEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static UserEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Unique identifier for the user */
  private java.lang.String userId;
  /** The action performed by the user */
  private com.training.kafka.avro.ActionType action;
  /** Timestamp when the event occurred (epoch millis) */
  private long timestamp;
  /** Session identifier for the user */
  private java.lang.String sessionId;
  /** Additional properties for the event */
  private java.util.Map<java.lang.String,java.lang.String> properties;
  /** Device information (optional) */
  private com.training.kafka.avro.DeviceInfo deviceInfo;
  /** Schema version for evolution tracking */
  private int version;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public UserEvent() {}

  /**
   * All-args constructor.
   * @param userId Unique identifier for the user
   * @param action The action performed by the user
   * @param timestamp Timestamp when the event occurred (epoch millis)
   * @param sessionId Session identifier for the user
   * @param properties Additional properties for the event
   * @param deviceInfo Device information (optional)
   * @param version Schema version for evolution tracking
   */
  public UserEvent(java.lang.String userId, com.training.kafka.avro.ActionType action, java.lang.Long timestamp, java.lang.String sessionId, java.util.Map<java.lang.String,java.lang.String> properties, com.training.kafka.avro.DeviceInfo deviceInfo, java.lang.Integer version) {
    this.userId = userId;
    this.action = action;
    this.timestamp = timestamp;
    this.sessionId = sessionId;
    this.properties = properties;
    this.deviceInfo = deviceInfo;
    this.version = version;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return userId;
    case 1: return action;
    case 2: return timestamp;
    case 3: return sessionId;
    case 4: return properties;
    case 5: return deviceInfo;
    case 6: return version;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: userId = value$ != null ? value$.toString() : null; break;
    case 1: action = (com.training.kafka.avro.ActionType)value$; break;
    case 2: timestamp = (java.lang.Long)value$; break;
    case 3: sessionId = value$ != null ? value$.toString() : null; break;
    case 4: properties = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    case 5: deviceInfo = (com.training.kafka.avro.DeviceInfo)value$; break;
    case 6: version = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'userId' field.
   * @return Unique identifier for the user
   */
  public java.lang.String getUserId() {
    return userId;
  }


  /**
   * Sets the value of the 'userId' field.
   * Unique identifier for the user
   * @param value the value to set.
   */
  public void setUserId(java.lang.String value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'action' field.
   * @return The action performed by the user
   */
  public com.training.kafka.avro.ActionType getAction() {
    return action;
  }


  /**
   * Sets the value of the 'action' field.
   * The action performed by the user
   * @param value the value to set.
   */
  public void setAction(com.training.kafka.avro.ActionType value) {
    this.action = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return Timestamp when the event occurred (epoch millis)
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * Timestamp when the event occurred (epoch millis)
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'sessionId' field.
   * @return Session identifier for the user
   */
  public java.lang.String getSessionId() {
    return sessionId;
  }


  /**
   * Sets the value of the 'sessionId' field.
   * Session identifier for the user
   * @param value the value to set.
   */
  public void setSessionId(java.lang.String value) {
    this.sessionId = value;
  }

  /**
   * Gets the value of the 'properties' field.
   * @return Additional properties for the event
   */
  public java.util.Map<java.lang.String,java.lang.String> getProperties() {
    return properties;
  }


  /**
   * Sets the value of the 'properties' field.
   * Additional properties for the event
   * @param value the value to set.
   */
  public void setProperties(java.util.Map<java.lang.String,java.lang.String> value) {
    this.properties = value;
  }

  /**
   * Gets the value of the 'deviceInfo' field.
   * @return Device information (optional)
   */
  public com.training.kafka.avro.DeviceInfo getDeviceInfo() {
    return deviceInfo;
  }


  /**
   * Sets the value of the 'deviceInfo' field.
   * Device information (optional)
   * @param value the value to set.
   */
  public void setDeviceInfo(com.training.kafka.avro.DeviceInfo value) {
    this.deviceInfo = value;
  }

  /**
   * Gets the value of the 'version' field.
   * @return Schema version for evolution tracking
   */
  public int getVersion() {
    return version;
  }


  /**
   * Sets the value of the 'version' field.
   * Schema version for evolution tracking
   * @param value the value to set.
   */
  public void setVersion(int value) {
    this.version = value;
  }

  /**
   * Creates a new UserEvent RecordBuilder.
   * @return A new UserEvent RecordBuilder
   */
  public static com.training.kafka.avro.UserEvent.Builder newBuilder() {
    return new com.training.kafka.avro.UserEvent.Builder();
  }

  /**
   * Creates a new UserEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UserEvent RecordBuilder
   */
  public static com.training.kafka.avro.UserEvent.Builder newBuilder(com.training.kafka.avro.UserEvent.Builder other) {
    if (other == null) {
      return new com.training.kafka.avro.UserEvent.Builder();
    } else {
      return new com.training.kafka.avro.UserEvent.Builder(other);
    }
  }

  /**
   * Creates a new UserEvent RecordBuilder by copying an existing UserEvent instance.
   * @param other The existing instance to copy.
   * @return A new UserEvent RecordBuilder
   */
  public static com.training.kafka.avro.UserEvent.Builder newBuilder(com.training.kafka.avro.UserEvent other) {
    if (other == null) {
      return new com.training.kafka.avro.UserEvent.Builder();
    } else {
      return new com.training.kafka.avro.UserEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for UserEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UserEvent>
    implements org.apache.avro.data.RecordBuilder<UserEvent> {

    /** Unique identifier for the user */
    private java.lang.String userId;
    /** The action performed by the user */
    private com.training.kafka.avro.ActionType action;
    /** Timestamp when the event occurred (epoch millis) */
    private long timestamp;
    /** Session identifier for the user */
    private java.lang.String sessionId;
    /** Additional properties for the event */
    private java.util.Map<java.lang.String,java.lang.String> properties;
    /** Device information (optional) */
    private com.training.kafka.avro.DeviceInfo deviceInfo;
    private com.training.kafka.avro.DeviceInfo.Builder deviceInfoBuilder;
    /** Schema version for evolution tracking */
    private int version;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.training.kafka.avro.UserEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.userId)) {
        this.userId = data().deepCopy(fields()[0].schema(), other.userId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.action)) {
        this.action = data().deepCopy(fields()[1].schema(), other.action);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.sessionId)) {
        this.sessionId = data().deepCopy(fields()[3].schema(), other.sessionId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.properties)) {
        this.properties = data().deepCopy(fields()[4].schema(), other.properties);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.deviceInfo)) {
        this.deviceInfo = data().deepCopy(fields()[5].schema(), other.deviceInfo);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasDeviceInfoBuilder()) {
        this.deviceInfoBuilder = com.training.kafka.avro.DeviceInfo.newBuilder(other.getDeviceInfoBuilder());
      }
      if (isValidValue(fields()[6], other.version)) {
        this.version = data().deepCopy(fields()[6].schema(), other.version);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing UserEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.training.kafka.avro.UserEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.userId)) {
        this.userId = data().deepCopy(fields()[0].schema(), other.userId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.action)) {
        this.action = data().deepCopy(fields()[1].schema(), other.action);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sessionId)) {
        this.sessionId = data().deepCopy(fields()[3].schema(), other.sessionId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.properties)) {
        this.properties = data().deepCopy(fields()[4].schema(), other.properties);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.deviceInfo)) {
        this.deviceInfo = data().deepCopy(fields()[5].schema(), other.deviceInfo);
        fieldSetFlags()[5] = true;
      }
      this.deviceInfoBuilder = null;
      if (isValidValue(fields()[6], other.version)) {
        this.version = data().deepCopy(fields()[6].schema(), other.version);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'userId' field.
      * Unique identifier for the user
      * @return The value.
      */
    public java.lang.String getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * Unique identifier for the user
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public com.training.kafka.avro.UserEvent.Builder setUserId(java.lang.String value) {
      validate(fields()[0], value);
      this.userId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * Unique identifier for the user
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'userId' field.
      * Unique identifier for the user
      * @return This builder.
      */
    public com.training.kafka.avro.UserEvent.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'action' field.
      * The action performed by the user
      * @return The value.
      */
    public com.training.kafka.avro.ActionType getAction() {
      return action;
    }


    /**
      * Sets the value of the 'action' field.
      * The action performed by the user
      * @param value The value of 'action'.
      * @return This builder.
      */
    public com.training.kafka.avro.UserEvent.Builder setAction(com.training.kafka.avro.ActionType value) {
      validate(fields()[1], value);
      this.action = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'action' field has been set.
      * The action performed by the user
      * @return True if the 'action' field has been set, false otherwise.
      */
    public boolean hasAction() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'action' field.
      * The action performed by the user
      * @return This builder.
      */
    public com.training.kafka.avro.UserEvent.Builder clearAction() {
      action = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Timestamp when the event occurred (epoch millis)
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * Timestamp when the event occurred (epoch millis)
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.training.kafka.avro.UserEvent.Builder setTimestamp(long value) {
      validate(fields()[2], value);
      this.timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Timestamp when the event occurred (epoch millis)
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Timestamp when the event occurred (epoch millis)
      * @return This builder.
      */
    public com.training.kafka.avro.UserEvent.Builder clearTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'sessionId' field.
      * Session identifier for the user
      * @return The value.
      */
    public java.lang.String getSessionId() {
      return sessionId;
    }


    /**
      * Sets the value of the 'sessionId' field.
      * Session identifier for the user
      * @param value The value of 'sessionId'.
      * @return This builder.
      */
    public com.training.kafka.avro.UserEvent.Builder setSessionId(java.lang.String value) {
      validate(fields()[3], value);
      this.sessionId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'sessionId' field has been set.
      * Session identifier for the user
      * @return True if the 'sessionId' field has been set, false otherwise.
      */
    public boolean hasSessionId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'sessionId' field.
      * Session identifier for the user
      * @return This builder.
      */
    public com.training.kafka.avro.UserEvent.Builder clearSessionId() {
      sessionId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'properties' field.
      * Additional properties for the event
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.lang.String> getProperties() {
      return properties;
    }


    /**
      * Sets the value of the 'properties' field.
      * Additional properties for the event
      * @param value The value of 'properties'.
      * @return This builder.
      */
    public com.training.kafka.avro.UserEvent.Builder setProperties(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[4], value);
      this.properties = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'properties' field has been set.
      * Additional properties for the event
      * @return True if the 'properties' field has been set, false otherwise.
      */
    public boolean hasProperties() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'properties' field.
      * Additional properties for the event
      * @return This builder.
      */
    public com.training.kafka.avro.UserEvent.Builder clearProperties() {
      properties = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'deviceInfo' field.
      * Device information (optional)
      * @return The value.
      */
    public com.training.kafka.avro.DeviceInfo getDeviceInfo() {
      return deviceInfo;
    }


    /**
      * Sets the value of the 'deviceInfo' field.
      * Device information (optional)
      * @param value The value of 'deviceInfo'.
      * @return This builder.
      */
    public com.training.kafka.avro.UserEvent.Builder setDeviceInfo(com.training.kafka.avro.DeviceInfo value) {
      validate(fields()[5], value);
      this.deviceInfoBuilder = null;
      this.deviceInfo = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'deviceInfo' field has been set.
      * Device information (optional)
      * @return True if the 'deviceInfo' field has been set, false otherwise.
      */
    public boolean hasDeviceInfo() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'deviceInfo' field and creates one if it doesn't exist yet.
     * Device information (optional)
     * @return This builder.
     */
    public com.training.kafka.avro.DeviceInfo.Builder getDeviceInfoBuilder() {
      if (deviceInfoBuilder == null) {
        if (hasDeviceInfo()) {
          setDeviceInfoBuilder(com.training.kafka.avro.DeviceInfo.newBuilder(deviceInfo));
        } else {
          setDeviceInfoBuilder(com.training.kafka.avro.DeviceInfo.newBuilder());
        }
      }
      return deviceInfoBuilder;
    }

    /**
     * Sets the Builder instance for the 'deviceInfo' field
     * Device information (optional)
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.training.kafka.avro.UserEvent.Builder setDeviceInfoBuilder(com.training.kafka.avro.DeviceInfo.Builder value) {
      clearDeviceInfo();
      deviceInfoBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'deviceInfo' field has an active Builder instance
     * Device information (optional)
     * @return True if the 'deviceInfo' field has an active Builder instance
     */
    public boolean hasDeviceInfoBuilder() {
      return deviceInfoBuilder != null;
    }

    /**
      * Clears the value of the 'deviceInfo' field.
      * Device information (optional)
      * @return This builder.
      */
    public com.training.kafka.avro.UserEvent.Builder clearDeviceInfo() {
      deviceInfo = null;
      deviceInfoBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'version' field.
      * Schema version for evolution tracking
      * @return The value.
      */
    public int getVersion() {
      return version;
    }


    /**
      * Sets the value of the 'version' field.
      * Schema version for evolution tracking
      * @param value The value of 'version'.
      * @return This builder.
      */
    public com.training.kafka.avro.UserEvent.Builder setVersion(int value) {
      validate(fields()[6], value);
      this.version = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'version' field has been set.
      * Schema version for evolution tracking
      * @return True if the 'version' field has been set, false otherwise.
      */
    public boolean hasVersion() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'version' field.
      * Schema version for evolution tracking
      * @return This builder.
      */
    public com.training.kafka.avro.UserEvent.Builder clearVersion() {
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public UserEvent build() {
      try {
        UserEvent record = new UserEvent();
        record.userId = fieldSetFlags()[0] ? this.userId : (java.lang.String) defaultValue(fields()[0]);
        record.action = fieldSetFlags()[1] ? this.action : (com.training.kafka.avro.ActionType) defaultValue(fields()[1]);
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (java.lang.Long) defaultValue(fields()[2]);
        record.sessionId = fieldSetFlags()[3] ? this.sessionId : (java.lang.String) defaultValue(fields()[3]);
        record.properties = fieldSetFlags()[4] ? this.properties : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[4]);
        if (deviceInfoBuilder != null) {
          try {
            record.deviceInfo = this.deviceInfoBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("deviceInfo"));
            throw e;
          }
        } else {
          record.deviceInfo = fieldSetFlags()[5] ? this.deviceInfo : (com.training.kafka.avro.DeviceInfo) defaultValue(fields()[5]);
        }
        record.version = fieldSetFlags()[6] ? this.version : (java.lang.Integer) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<UserEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<UserEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<UserEvent>
    READER$ = (org.apache.avro.io.DatumReader<UserEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.userId);

    out.writeEnum(this.action.ordinal());

    out.writeLong(this.timestamp);

    out.writeString(this.sessionId);

    long size0 = this.properties.size();
    out.writeMapStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.util.Map.Entry<java.lang.String, java.lang.String> e0: this.properties.entrySet()) {
      actualSize0++;
      out.startItem();
      out.writeString(e0.getKey());
      java.lang.String v0 = e0.getValue();
      out.writeString(v0);
    }
    out.writeMapEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    if (this.deviceInfo == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.deviceInfo.customEncode(out);
    }

    out.writeInt(this.version);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.userId = in.readString();

      this.action = com.training.kafka.avro.ActionType.values()[in.readEnum()];

      this.timestamp = in.readLong();

      this.sessionId = in.readString();

      long size0 = in.readMapStart();
      java.util.Map<java.lang.String,java.lang.String> m0 = this.properties; // Need fresh name due to limitation of macro system
      if (m0 == null) {
        m0 = new java.util.HashMap<java.lang.String,java.lang.String>((int)(size0 * 4)/3 + 1);
        this.properties = m0;
      } else m0.clear();
      for ( ; 0 < size0; size0 = in.mapNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.String k0 = null;
          k0 = in.readString();
          java.lang.String v0 = null;
          v0 = in.readString();
          m0.put(k0, v0);
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.deviceInfo = null;
      } else {
        if (this.deviceInfo == null) {
          this.deviceInfo = new com.training.kafka.avro.DeviceInfo();
        }
        this.deviceInfo.customDecode(in);
      }

      this.version = in.readInt();

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.userId = in.readString();
          break;

        case 1:
          this.action = com.training.kafka.avro.ActionType.values()[in.readEnum()];
          break;

        case 2:
          this.timestamp = in.readLong();
          break;

        case 3:
          this.sessionId = in.readString();
          break;

        case 4:
          long size0 = in.readMapStart();
          java.util.Map<java.lang.String,java.lang.String> m0 = this.properties; // Need fresh name due to limitation of macro system
          if (m0 == null) {
            m0 = new java.util.HashMap<java.lang.String,java.lang.String>((int)(size0 * 4)/3 + 1);
            this.properties = m0;
          } else m0.clear();
          for ( ; 0 < size0; size0 = in.mapNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.String k0 = null;
              k0 = in.readString();
              java.lang.String v0 = null;
              v0 = in.readString();
              m0.put(k0, v0);
            }
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.deviceInfo = null;
          } else {
            if (this.deviceInfo == null) {
              this.deviceInfo = new com.training.kafka.avro.DeviceInfo();
            }
            this.deviceInfo.customDecode(in);
          }
          break;

        case 6:
          this.version = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










